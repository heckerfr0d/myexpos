alias process_table_entry R4;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

// set MODE FLAG (in PROCESS TABLE) to syscall number
[process_table_entry + 9] = 9;

// store value of userSP in R0
alias userSP R0;
userSP = SP;

// switch to kernel stack
[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

// get fileName from user stack
alias fileName R1;
fileName = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];

alias i R2;
i = INODE_TABLE + 1;
while (i < INODE_TABLE + 960) do
    if ([i]==fileName) then
        break;
    endif;
    i = i + 16;
endwhile;

if(i > INODE_TABLE + 960 || [i-1]!=EXEC) then
    // file invalid
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;

    // restore SP to userSP
    SP = userSP;

    // reset MODE FLAG (in PROCESS TABLE) to 0
    [process_table_entry + 9] = 0;

    ireturn;
endif ;


// exit process
multipush(R0, R1, R2, R4);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;
multipop(R0, R1, R2, R4);

alias UAPage R3;
UAPage = [process_table_entry + 11];

// allocate same UAPage & PID
[MEMORY_FREE_LIST + UAPage] = [MEMORY_FREE_LIST + UAPage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = UAPage*512 - 1;

// per-process resource table
R5 = UAPage*512 + 496;
R8 = R5 + 16;
while(R5 < R8) do
    [R5] = -1;
    R5 = R5 + 2;
endwhile;


[process_table_entry + 4] = RUNNING;
[process_table_entry + 7] = (i-INODE_TABLE)/16;

// library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// get pages

// stack
multipush(R0, R1, R2, R3, R4);
R1 = 1;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop(R0, R1, R2, R3, R4);

// get code
multipush(R0, R1, R2, R3, R4);
R2 = [i + 7];
R1 = 5;
call MEMORY_MANAGER;
[PTBR+8] = R0;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
multipop(R0, R1, R2, R3, R4);

alias disk_map_entry R5;
disk_map_entry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;

[disk_map_entry + 2] = -1;
[disk_map_entry + 3] = -1;
[disk_map_entry + 4] = [i + 7];
[disk_map_entry + 5] = [i + 8];
[disk_map_entry + 6] = [i + 9];
[disk_map_entry + 7] = [i + 10];
[disk_map_entry + 8] = -1;
[disk_map_entry + 9] = -1;


[[PTBR+16]*512] = [[PTBR+8]*512+1];

SP = 8*512;

[process_table_entry + 9] = 0;

ireturn;