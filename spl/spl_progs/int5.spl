alias process_table_entry R4;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16;

// store value of userSP in R0
alias userSP R0;
userSP = SP;

// extract syscall number from user stack
alias sysno R1;
sysno = [[PTBR + 2*(userSP-5)/512]*512 + (userSP-5)%512];

// set MODE FLAG (in PROCESS TABLE) to syscall number
[process_table_entry + 9] = sysno;

// switch to kernel stack
[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;


if (sysno == INT_OPEN) then
    alias i R2;
    i = SP + 497;
    alias n R3;
    n = i + 16;

    // find free entry in per process resource table
    while (i < n) do
        if ([i] == -1) then
            [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = (i - [process_table_entry + 11]*512 - 496)/2;

            multipush(R0, R1, R2, R3, R4);
            multipush(R0);
            R1 = ACQUIRE_KERN_LOCK;
            call ACCESS_CONTROL;
            multipop(R0);
            // open file
            R1 = OPEN;
            R2 = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
            call FILE_MANAGER;

            if (R0 < 0) then
                // open error
                multipop(R0, R1, R2, R3, R4);
                [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = R0;
                goto end;
            endif;

            multipop(R1, R2, R3, R4);

            [i] = FILE;
            [i+1] = R0;
            multipop(R0);

            goto end;
        endif;
        i = i + 2;
    endwhile;

    // no free entry in per process resource table
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -3;
    goto end;
endif;

alias fd R2;
alias resource_table_entry R3;
fd = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
resource_table_entry = SP + 497 + fd*2;

if (fd<0 || fd>7 || [resource_table_entry]!=FILE) then
    // no such opened file
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

if (sysno == INT_CLOSE) then
    // close file
    multipush(R0, R1, R2, R3, R4);
    multipush(R3);
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R3);
    R1 = CLOSE;
    R2 = [resource_table_entry + 1];
    call FILE_MANAGER;
    multipop(R0, R1, R2, R3, R4);

    [resource_table_entry] = -1;

    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;

    goto end;
endif;

if (sysno == INT_SEEK) then
    alias oft R5;
    oft = OPEN_FILE_TABLE + [resource_table_entry + 1]*4;
    // acquire inode
    multipush(R0, R1, R2, R3, R4, R5);

    multipush(R5);
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R5);
    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE+5*CORE+1];
    R3 = [oft];
    call RESOURCE_MANAGER;
    if (R0 == -1) then
        // acquire inode failed
        multipop(R0, R1, R2, R3, R4, R5);
        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
    else
        multipop(R0, R1, R2, R3, R4, R5);
        alias offset R6;
        offset = [[PTBR + 2*(userSP-3)/512]*512 + (userSP-3)%512];
        if (offset == 0) then
            // seek to beginning of file
            [oft + 2] = 0;
            [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
        else
            alias lseek R8;
            lseek = [oft + 2] + offset;
            if (lseek < 0) then
                // seek before beginning
                [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -2;
            else
                alias filesize R7;
                filesize = [INODE_TABLE + [oft]*16 + 2];
                if (lseek > filesize) then
                    // seek beyond end of file
                    [oft + 2] = filesize;
                else
                    // seek to offset
                    [oft + 2] = lseek;
                endif;
                [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
            endif;
        endif;
        // release inode
        multipush(R0, R1, R2, R3, R4);
        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE+5*CORE+1];
        R3 = [oft];
        call RESOURCE_MANAGER;
        multipop(R0, R1, R2, R3, R4);
    endif;
    goto end;
endif;

end:
[process_table_entry + 9] = 0;
multipush(R0);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R0);
SP = userSP;
ireturn;