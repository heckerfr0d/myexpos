alias process_table_entry R4;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16;

// store value of userSP in R0
alias userSP R0;
userSP = SP;

// extract syscall number from user stack
alias sysno R1;
sysno = [[PTBR + 2*(userSP-5)/512]*512 + (userSP-5)%512];

// set MODE FLAG (in PROCESS TABLE) to syscall number
[process_table_entry + 9] = sysno;

// switch to kernel stack
[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;


if (sysno == 19) then
    // semlock
    alias semid R2;
    semid = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
    alias resource_table_entry R3;
    resource_table_entry = [process_table_entry + 11]*512 + 496 + 2*semid;

    if (semid<0 || semid>7 || [resource_table_entry]!=1) then
        // invalid semid
        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
        goto end;
    endif;

    alias sem_table_entry R5;
    sem_table_entry = SEMAPHORE_TABLE + [resource_table_entry+1]*4;
    // busy loop
    multipush(R0, R2, R3, R4);
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0, R2, R3, R4);
    while ([sem_table_entry]!=-1 && [sem_table_entry]!=[SYSTEM_STATUS_TABLE+5*CORE+1]) do
        [process_table_entry + 4] = WAIT_SEMAPHORE;
        [process_table_entry + 5] = [resource_table_entry + 1];
        multipush(R0, R1, R2, R3, R4, R5);
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;

        call SCHEDULER;

        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0, R1, R2, R3, R4, R5);
    endwhile;

    [sem_table_entry] = [SYSTEM_STATUS_TABLE+5*CORE+1];
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
    multipush(R0, R4);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0, R4);
    goto end;
endif;

if (sysno == 20) then
    // semunlock
    alias semid R2;
    semid = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
    alias resource_table_entry R3;
    resource_table_entry = [process_table_entry + 11]*512 + 496 + 2*semid;

    if (semid<0 || semid>7 || [resource_table_entry]!=1) then
        // invalid semid
        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
        goto end;
    endif;

    multipush(R0, R2, R3, R4);
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0, R2, R3, R4);

    alias sem_table_entry R5;
    sem_table_entry = SEMAPHORE_TABLE + [resource_table_entry+1]*4;
    if ([sem_table_entry]!=-1) then
        if ([sem_table_entry]!=[SYSTEM_STATUS_TABLE+5*CORE+1]) then
            // semaphore locked by another process
            [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -2;
            multipush(R0, R4);
            R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            multipop(R0, R4);
            goto end;
        endif;

        [sem_table_entry] = -1;

        alias i R5;
        i = PROCESS_TABLE + 20;
        while (i<PROCESS_TABLE+256) do
            if ([i]==WAIT_SEMAPHORE && [i+1]==[resource_table_entry+1]) then
                [i] = READY;
            endif;
            i = i + 16;
        endwhile;
    endif;
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
    multipush(R0, R4);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0, R4);
    goto end;
endif;

end:
[process_table_entry + 9] = 0;
SP = userSP;
ireturn;