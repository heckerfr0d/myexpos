// Store SP in PROCESS_TABLE
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

backup;


alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE+1];
alias swap R0;
swap = [SYSTEM_STATUS_TABLE + 5];

if (swap != 0) then
	if (currentPID == 15) then
		multipush(R0, R2);
		R1 = swap;
		call PAGER_MODULE;
		multipop(R0, R2);
	endif;
else
	if ([SYSTEM_STATUS_TABLE + 2] < MEM_LOW) then
		[SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;
	else
		if ([SYSTEM_STATUS_TABLE + 4] > 0) then
			alias i R3;
			i = PROCESS_TABLE + 48;
			while (i < PROCESS_TABLE + 240) do
				if ([i+6] == 1 && ([i] > MAX_TICK || [SYSTEM_STATUS_TABLE+2]>MEM_HIGH) && [i+4]==READY) then
					[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
					break;
				endif;
				i = i + 16;
			endwhile;
		endif;
	endif;
endif;

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID*16;

[process_table_entry + 4] = READY;

alias i R4;
i=PROCESS_TABLE;
while (i<PROCESS_TABLE+256) do
	[i] = [i] + 1;
	i = i + 16;
endwhile;

call SCHEDULER;

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;

ireturn;