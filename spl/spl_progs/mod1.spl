// PROCESS_MANAGER
alias functionNum R1;
alias currentPID R2;

if (functionNum == 1) then
    // get PCB Entry
    alias i R0;
    i = PROCESS_TABLE + 20;
    while (i<PROCESS_TABLE+256) do
        if([i]==TERMINATED) then
            [i] = ALLOCATED;
            [i+11] = 10;
            i = (i-PROCESS_TABLE-4)/16;
            [PROCESS_TABLE + 16*i + 1] = i;
            [PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i;
            return;
        endif;
        i = i + 16;
    endwhile;
    i = -1;
    return;
endif;

if (functionNum == FREE_USER_AREA_PAGE) then
    // free UAPage

    alias i R3;
    alias n R4;
    i = [PROCESS_TABLE + currentPID*16 + 11]*512 + 496;
    n = i + 16;

    // find valid semaphore in per process resource table
    while (i < n) do
        if ([i] == SEMAPHORE) then
            multipush (R1, R2, R3, R4);
            R1 = 7;
            R3 = [i+1];
            call RESOURCE_MANAGER;
            multipop (R1, R2, R3, R4);
        else
            if ([i] == FILE) then
                multipush (R1, R2, R3, R4);
                R1 = CLOSE;
                R3 = [i+1];
                call FILE_MANAGER;
                multipop (R1, R2, R3, R4);
            endif;
        endif;
        i = i + 2;
    endwhile;

    multipush(R1, R2, R3, R4);
    R1 = 2;
    R2 = [PROCESS_TABLE + currentPID*16 + 11];
    call MEMORY_MANAGER;
    multipop(R1, R2, R3, R4);

    return;
endif;

if (functionNum == EXIT_PROCESS) then
    // exit
    multipush(R1, R2);

    // free pageTable
    R1 = 4;
    call PROCESS_MANAGER;

    // free UAPage
    R1 = 2;
    call PROCESS_MANAGER;

    multipop(R1, R2);

    if ([PROCESS_TABLE + currentPID*16 + 9] != 9) then
        alias i R0;
        i = PROCESS_TABLE + 20;
        while (i < PROCESS_TABLE+256) do
            if ([i] == WAIT_PROCESS && [i+1] == currentPID) then
                [i] = READY;
            endif;
            if ([i-2] == currentPID) then
                [i-2] = -1;
            endif;
            i = i + 16;
        endwhile;
    endif;

    [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
    return;
endif;

if (functionNum == FREE_PAGE_TABLE) then
    // free pageTable
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    // release stack, heap, code pages
    alias pageTable R3;
    pageTable = PTBR + 4;
    while (pageTable < PTBR+20) do
        if ([pageTable] != -1) then
            multipush(R1, R2, R3);
            R1 = 2;
            R2 = [pageTable];
            call MEMORY_MANAGER;
            multipop(R1, R2, R3);

            [pageTable] = -1;
            [pageTable + 1] = "0000";
        endif;
        pageTable = pageTable + 2;
    endwhile;

    // release stack, heap blocks
    alias dmt R5;
    dmt = DISK_MAP_TABLE + currentPID*10;
    multipush(R1, R2, R3, R5);
    R3 = currentPID;
    R1 = 4;
    if([dmt+2] != -1) then
        R2 = [dmt+2];
        call MEMORY_MANAGER;
        [dmt+2] = -1;
    endif;
    if([dmt+3] != -1) then
        R2 = [dmt+3];
        call MEMORY_MANAGER;
        [dmt+3] = -1;
    endif;
    if([dmt+8] != -1) then
        R2 = [dmt+8];
        call MEMORY_MANAGER;
        [dmt+8] = -1;
    endif;
    if([dmt+9] != -1) then
        R2 = [dmt+9];
        call MEMORY_MANAGER;
        [dmt+9] = -1;
    endif;
    [dmt+4] = -1;
    [dmt+5] = -1;
    [dmt+6] = -1;
    [dmt+7] = -1;
    multipop(R1, R2, R3, R5);

    return;
endif;
