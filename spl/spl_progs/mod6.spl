// PAGER_MODULE
alias functionNum R1;

if (functionNum == SWAP_OUT) then
    alias i R7;
    alias proc R2;
    alias sem R3;
    alias tick R4;
    proc = -1;
    sem = -1;
    tick = -1;
    i = PROCESS_TABLE + 52;
    while (i < PROCESS_TABLE + 224) do
        if ([i+2]==0) then
            if ([i]==WAIT_PROCESS) then
                proc = i;
                break;
            endif;
            if (sem == -1 && [i]==WAIT_SEMAPHORE) then
                sem = i;
            endif;
            if (sem == -1 && [i]!=RUNNING && [i]!=TERMINATED && [i]!=ALLOCATED) then
                if (tick==-1) then
                    tick = i;
                else
                    if ([i-4]>[tick-4]) then
                        tick = i;
                    endif;
                endif;
            endif;
        endif;
        i = i + 16;
    endwhile;

    alias pid R5;

    if (proc != -1) then
        pid = (proc-PROCESS_TABLE)/16;
        [proc-4] = 0;
    else
        if (sem != -1) then
            pid = (sem-PROCESS_TABLE)/16;
            [sem-4] = 0;
        else
            if (tick != -1) then
                pid = (tick-PROCESS_TABLE)/16;
                [tick-4] = 0;
            else
                [SYSTEM_STATUS_TABLE+5] = 0;
                return;
            endif;
        endif;
    endif;

    alias ptb R6;
    alias dmt R8;
    ptb = PAGE_TABLE_BASE + pid*20;
    dmt = DISK_MAP_TABLE + pid*10;
    i = 4;
    while (i<20) do
        if([ptb+i]!=-1) then
            if ((i<8 && [MEMORY_FREE_LIST+[ptb+i]]==1) || i>15) then
                multipush(R1, R2, R3, R4, R5, R6, R7, R8);
                R1 = GET_SWAP_BLOCK;
                call MEMORY_MANAGER;
                multipop(R1, R2, R3, R4, R5, R6, R7, R8);

                [dmt + i/2] = R0;

                multipush(R1, R2, R3, R4, R5, R6, R7, R8);
                R4 = R0;
                R3 = [ptb+i];
                R2 = 15;
                R1 = DISK_STORE;
                call DEVICE_MANAGER;
                multipop(R1, R2, R3, R4, R5, R6, R7, R8);
            endif;
            if ([MEMORY_FREE_LIST+[ptb+i]]==1 || i>7) then
                multipush(R1, R2, R3, R4, R5, R6, R7, R8);
                R1 = RELEASE_PAGE;
                R2 = [ptb+i];
                call MEMORY_MANAGER;
                multipop(R1, R2, R3, R4, R5, R6, R7, R8);
                [ptb+i] = -1;
                [ptb+i+1] = "0000";
            endif;
        endif;

        i = i + 2;
    endwhile;

    [PROCESS_TABLE + pid*16 + 6] = 1;
    [SYSTEM_STATUS_TABLE+4] = [SYSTEM_STATUS_TABLE+4] + 1;
    [SYSTEM_STATUS_TABLE+5] = 0;

    return;
endif;

if (functionNum == SWAP_IN) then
    alias i R3;
    alias tick R4;
    tick = -1;
    i = PROCESS_TABLE + 52;
    while (i<PROCESS_TABLE + 224) do
        if ([i]==READY && [i+2]==1) then
            if (tick==-1) then
                tick = i;
            else
                if ([i-4]>[tick-4]) then
                    tick = i;
                endif;
            endif;
        endif;
        i = i + 16;
    endwhile;
    if (tick == -1) then
        [SYSTEM_STATUS_TABLE+5] = 0;
        return;
    endif;

    alias pid R5;
    pid = (tick-PROCESS_TABLE)/16;
    alias dmt R6;
    alias ptb R7;
    dmt = DISK_MAP_TABLE + pid*10;
    ptb = PAGE_TABLE_BASE + pid*20;
    i = 2;
    while (i<10) do
        if ((i<4 || i>7) && [dmt+i]!=-1) then
            multipush(R1, R3, R4, R5, R6, R7);
            R1 = GET_FREE_PAGE;
            call MEMORY_MANAGER;
            multipop(R1, R3, R4, R5, R6, R7);

            [ptb+i*2] = R0;
            [ptb+i*2+1] = "0110";

            multipush(R1, R3, R4, R5, R6, R7);
            R4 = [dmt+i];
            R3 = R0;
            R2 = 15;
            R1 = DISK_LOAD;
            call DEVICE_MANAGER;
            multipop(R1, R3, R4, R5, R6, R7);

            multipush(R1, R3, R4, R5, R6, R7);
            R1 = RELEASE_BLOCK;
            R2 = [dmt+i];
            R3 = 15;
            call MEMORY_MANAGER;
            multipop(R1, R3, R4, R5, R6, R7);
            // if ([dmt+i]!=-1 && [ptb+i*2]==-1) then
            //     breakpoint;
            // endif;
            [dmt+i] = -1;

        endif;
        i = i + 1;
    endwhile;

    [PROCESS_TABLE + pid*16 + 6] = 0;
    [SYSTEM_STATUS_TABLE+4] = [SYSTEM_STATUS_TABLE+4] - 1;
    [SYSTEM_STATUS_TABLE+5] = 0;

    return;
endif;