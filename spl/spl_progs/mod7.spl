// BOOT MODULE
// load exception handler
loadi(2, 15);
loadi(3, 16);

// load timer int
loadi(4, 17);
loadi(5, 18);

//load disk int
loadi(6, 19);
loadi(7, 20);

// load console int
loadi(8, 21);
loadi(9, 22);

// load int4
loadi(10, 23);
loadi(11, 24);

// load int6
loadi(14, 27);
loadi(15, 28);

// load int7
loadi(16, 29);
loadi(17, 30);

// load int8
loadi(18, 31);
loadi(19, 32);

// load int9
loadi(20, 33);
loadi(21, 34);


// load int10 (exit code)
loadi(22, 35);
loadi(23, 36);

// load int11
loadi(24, 37);
loadi(25, 38);

// load int13
loadi(28, 41);
loadi(29, 42);

// load int14
loadi(30, 43);
loadi(31, 44);

// load int15
loadi(32, 45);
loadi(33, 46);

// load RESOURCE_MANAGER(mod0)
loadi(40, 53);
loadi(41, 54);

// load PROCESS_MANAGER(mod1)
loadi(42, 55);
loadi(43, 56);

// load MEMORY_MANAGER(mod2)
loadi(44, 57);
loadi(45, 58);

// load DEVICE_MANAGER(mod4)
loadi(48, 61);
loadi(49, 62);

// load scheduler(mod5)
loadi(50,63);
loadi(51,64);

// load INODE_TABLE
loadi(59, 3);
loadi(60, 4);

// load DISK_FREE_LIST
loadi(61, 2);

// load ROOT_FILE
loadi(62, 5);

// load library
loadi(63, 13);
loadi(64, 14);

// load init (program1)
loadi(65, 7);
loadi(66, 8);


[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

PTBR = PAGE_TABLE_BASE + 20;
// INIT
// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// INIT
[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+19] = 1;
[PROCESS_TABLE+20] = CREATED;
[PROCESS_TABLE+27] = 80;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE+31] = 10;

// init DISK_MAP_TABLE
[DISK_MAP_TABLE + 12] = -1;
[DISK_MAP_TABLE + 13] = -1;
[DISK_MAP_TABLE + 14] = 7;
[DISK_MAP_TABLE + 15] = 8;
[DISK_MAP_TABLE + 16] = -1;
[DISK_MAP_TABLE + 17] = -1;
[DISK_MAP_TABLE + 18] = -1;
[DISK_MAP_TABLE + 19] = -1;

// init fst
R0 = FILE_STATUS_TABLE;
R1 = R0 + 240;
while (R0<R1) do
    [R0] = -1;
    [R0+1] = -1;
    R0 = R0+4;
endwhile;

// init buffer table
R0 = BUFFER_TABLE;
R1 = BUFFER_TABLE + 16;
while (R0<R1) do
    [R0] = -1;
    [R0+1] = -1;
    [R0+2] = -1;
    R0 = R0 + 4;
endwhile;

// INIT per-process resource table
R0 = 80*512 + 496;
R1 = R0 + 16;
while(R0 < R1) do
    [R0] = -1;
    R0 = R0 + 2;
endwhile;

//INIT disk_map_table
alias j R0;
j = 0;
while(j < 10) do
    [DISK_MAP_TABLE + 10 + j] = -1;
    j=j+1;
endwhile;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;

// initialize semaphore table
R0 = SEMAPHORE_TABLE;
R1 = R0 + 128;
while (R0 < R1) do
    [R0] = -1;
    [R0+1] = 0;
    R0 = R0 + 4;
endwhile;

[76*512] = [65*512+1];


// set all other entries to TERMINATED
[PROCESS_TABLE+36] = TERMINATED;
[PROCESS_TABLE+52] = TERMINATED;
[PROCESS_TABLE+68] = TERMINATED;
[PROCESS_TABLE+84] = TERMINATED;
[PROCESS_TABLE+100] = TERMINATED;
[PROCESS_TABLE+116] = TERMINATED;
[PROCESS_TABLE+132] = TERMINATED;
[PROCESS_TABLE+148] = TERMINATED;
[PROCESS_TABLE+164] = TERMINATED;
[PROCESS_TABLE+180] = TERMINATED;
[PROCESS_TABLE+196] = TERMINATED;
[PROCESS_TABLE+212] = TERMINATED;
[PROCESS_TABLE+228] = TERMINATED;
[PROCESS_TABLE+244] = TERMINATED;

// initialize MEMORY_FREE_LIST
alias i R0;
i = 0;
while (i < 83) do
    [MEMORY_FREE_LIST + i] = 1;
    i = i + 1;
endwhile;
while (i < 128) do
    [MEMORY_FREE_LIST + i] = 0;
    i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

return;