// BOOT MODULE
// load exception handler
loadi(2, 15);
loadi(3, 16);

// load timer int
loadi(4, 17);
loadi(5, 18);

//load disk int
loadi(6, 19);
loadi(7, 20);

// load console int
loadi(8, 21);
loadi(9, 22);

// load int4
loadi(10, 23);
loadi(11, 24);

// load int5
loadi(12, 25);
loadi(13, 26);

// load int6
loadi(14, 27);
loadi(15, 28);

// load int7
loadi(16, 29);
loadi(17, 30);

// load int8
loadi(18, 31);
loadi(19, 32);

// load int9
loadi(20, 33);
loadi(21, 34);

// load int10 (exit code)
loadi(22, 35);
loadi(23, 36);

// load int11
loadi(24, 37);
loadi(25, 38);

// load int12
loadi(26, 39);
loadi(27, 40);

// load int13
loadi(28, 41);
loadi(29, 42);

// load int14
loadi(30, 43);
loadi(31, 44);

// load int15
loadi(32, 45);
loadi(33, 46);

// load int16
loadi(34, 47);
loadi(35, 48);

// load int17
loadi(36, 49);
loadi(37, 50);

// load RESOURCE_MANAGER(mod0)
loadi(40, 53);
loadi(41, 54);

// load PROCESS_MANAGER(mod1)
loadi(42, 55);
loadi(43, 56);

// load MEMORY_MANAGER(mod2)
loadi(44, 57);
loadi(45, 58);

// load FILE_MANAGER(mod3)
loadi(46, 59);
loadi(47, 60);

// load DEVICE_MANAGER(mod4)
loadi(48, 61);
loadi(49, 62);

// load scheduler(mod5)
loadi(50,63);
loadi(51,64);

// load pager(mod6)
loadi(52,65);
loadi(53,66);

// load INODE_TABLE
loadi(59, 3);
loadi(60, 4);

// load DISK_FREE_LIST
loadi(61, 2);

// load ROOT_FILE
loadi(62, 5);

// load library
loadi(63, 13);
loadi(64, 14);

// load init (login)
loadi(65, 7);

// load shell
loadi(67, 9);
loadi(68, 10);

// load bootstrap2
loadi(128, 512);

// load mod8 (access control)
loadi(132, 516);


// INIT
PTBR = PAGE_TABLE_BASE + 20;
// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// process table
[PROCESS_TABLE+16] = 0;
[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+19] = 1;
[PROCESS_TABLE+20] = CREATED;
[PROCESS_TABLE+22] = 0;
[PROCESS_TABLE+27] = 77;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] = PTBR;
[PROCESS_TABLE+31] = 10;

[66*512] = [65*512+1];

// shell
PTBR = PTBR + 20;
// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";


// shell
[PROCESS_TABLE+32] = 0;
[PROCESS_TABLE+33] = 2;
[PROCESS_TABLE+35] = 1;
[PROCESS_TABLE+36] = TERMINATED;
[PROCESS_TABLE+38] = 0;
[PROCESS_TABLE+43] = 80;
[PROCESS_TABLE+44] = 0;
[PROCESS_TABLE+45] = 8*512;
[PROCESS_TABLE+46] = PTBR;
[PROCESS_TABLE+47] = 10;


[78*512] = [67*512+1];

// set all other entries to TERMINATED
R0 = PROCESS_TABLE + 48;
R1 = PROCESS_TABLE + 240;
while (R0<R1) do
    [R0] = 0;
    [R0+4] = TERMINATED;
    [R0+6] = 0;
    R0 = R0 + 16;
endwhile;


// shell DISK_MAP_TABLE
[DISK_MAP_TABLE + 22] = -1;
[DISK_MAP_TABLE + 23] = -1;
[DISK_MAP_TABLE + 24] = 9;
[DISK_MAP_TABLE + 25] = 10;
[DISK_MAP_TABLE + 26] = -1;
[DISK_MAP_TABLE + 27] = -1;
[DISK_MAP_TABLE + 28] = -1;
[DISK_MAP_TABLE + 29] = -1;


// initialize fst
R0 = FILE_STATUS_TABLE;
R1 = R0 + 240;
while (R0<R1) do
    [R0] = -1;
    [R0+1] = -1;
    R0 = R0+4;
endwhile;

// initialize open file table
R0 = OPEN_FILE_TABLE;
R1 = R0 + 128;
while (R0<R1) do
    [R0] = -1;
    [R0+1] = 0;
    R0 = R0+4;
endwhile;

// initialize buffer table
R0 = BUFFER_TABLE;
R1 = BUFFER_TABLE + 16;
while (R0<R1) do
    [R0] = -1;
    [R0+1] = 0;
    [R0+2] = -1;
    R0 = R0 + 4;
endwhile;

// INIT per-process resource table
R0 = 80*512 + 496;
R1 = R0 + 16;
while(R0 < R1) do
    [R0] = -1;
    R0 = R0 + 2;
endwhile;


// initialize semaphore table
R0 = SEMAPHORE_TABLE;
R1 = R0 + 128;
while (R0 < R1) do
    [R0] = -1;
    [R0+1] = 0;
    R0 = R0 + 4;
endwhile;


// initialize MEMORY_FREE_LIST
alias i R0;
i = 0;
while (i < 128) do
    if (i<85) then
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;


[SYSTEM_STATUS_TABLE + 2] = 43;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 4] = 0;
[SYSTEM_STATUS_TABLE + 5] = 0;
[SYSTEM_STATUS_TABLE + 6] = 14;
[SYSTEM_STATUS_TABLE + 7] = 0;

[KERN_LOCK] = 0;
[SCHED_LOCK] = 0;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;


return;