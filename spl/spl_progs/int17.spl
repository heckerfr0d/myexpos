// only login process can login
if ([SYSTEM_STATUS_TABLE+5*CORE+1]!=1) then
    [[PTBR + 2*(SP-1)/512]*512 + (SP-1)%512] = -2;
    ireturn;
endif;

alias process_table_entry R4;
process_table_entry = PROCESS_TABLE + 16;

// set MODE FLAG (in PROCESS TABLE) to syscall number
[process_table_entry + 9] = INT_LOGIN;

// store value of userSP in R0
alias userSP R0;
userSP = SP;

// switch to kernel stack
[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;


// get args from user stack
alias username R1;
alias password R2;
username = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
password = [[PTBR + 2*(userSP-3)/512]*512 + (userSP-3)%512];
encrypt password;

alias user R3;
user = USER_TABLE;
while (user < USER_TABLE + 32) do
    if ([user]==username) then
        if ([user + 1]==password) then
            [PROCESS_TABLE + 35] = (user - USER_TABLE)/2;
            [PROCESS_TABLE + 36] = CREATED;
            [process_table_entry + 4] = WAIT_PROCESS;
            [process_table_entry + 5] = 2;

            call SCHEDULER;

            [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
            [process_table_entry + 9] = 0;
            SP = userSP;
            ireturn;
        else
            break;
        endif;
    endif;
    user = user + 2;
endwhile;

[[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
[process_table_entry + 9] = 0;
SP = userSP;
ireturn;