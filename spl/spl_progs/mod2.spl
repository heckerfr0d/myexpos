// MEMORY_MANAGER
alias functionNum R1;

if (functionNum == 1) then
    // get free page
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    alias process_table_entry R3;
    process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [process_table_entry + 4] = WAIT_MEM;
        multipush(R0, R1, R3);
        call SCHEDULER;
        multipop(R0, R1, R3);
    endwhile;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    alias page R4;
    page = 76;
    while (page < MAX_MEM_PAGE) do
        if([MEMORY_FREE_LIST + page] == 0) then
            [MEMORY_FREE_LIST + page] = 1;
            R0 = page;
            return;
        endif;
        page = page + 1;
    endwhile;
    // breakpoint;
    return;
endif;

if (functionNum == 2) then
    // release page
    alias pageNo R2;
    [MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] - 1;
    if ([MEMORY_FREE_LIST + pageNo] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        alias i R3;
        i = PROCESS_TABLE + 20;
        while(i < PROCESS_TABLE+256) do
            if([i] == WAIT_MEM) then
                [i] = READY;
            endif;
            i = i + 16;
        endwhile;
    endif;
    // breakpoint;
    return;
endif;

if (functionNum == 4) then
    // release block
    alias blockNo R2;
    [DISK_FREE_LIST + blockNo] = [DISK_FREE_LIST + blockNo] - 1;

    return;
endif;

if (functionNum == 5) then
    // get code page
    alias blockNo R2;
    alias dmt R3;
    alias ptb R4;
    alias j R5;
    dmt = DISK_MAP_TABLE+4;
    ptb = PAGE_TABLE_BASE+8;
    while(dmt < DISK_MAP_TABLE+160) do
        j = 0;
        while(j < 4) do
            if([dmt+j]==blockNo && [ptb+2*j]!=-1) then
                R0 = [ptb+2*j];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;
            endif;
            j = j + 1;
        endwhile;
        dmt = dmt + 10;
        ptb = ptb + 20;
    endwhile;

    // get free page
    multipush(R1, R2, R3, R4, R5);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    // disk load
    multipush(R0, R1, R2, R3, R4, R5);
    R4 = blockNo;
    R3 = R0;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R1 = 2;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5);

    return;
endif;