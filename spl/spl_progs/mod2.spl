alias functionNum R1;

if (functionNum == GET_FREE_PAGE) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    alias process_table_entry R3;
    process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [process_table_entry + 4] = WAIT_MEM;
        multipush(R0, R1, R3);
        call SCHEDULER;
        multipop(R0, R1, R3);
    endwhile;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    alias page R4;
    page = 76;
    while (page < MAX_MEM_PAGE) do
        if([MEMORY_FREE_LIST + page] == 0) then
            [MEMORY_FREE_LIST + page] = 1;
            R0 = page;
            return;
        endif;
        page = page + 1;
    endwhile;
    // breakpoint;
    return;
endif;

if (functionNum == RELEASE_PAGE) then
    alias pageNo R2;
    [MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] - 1;
    if ([MEMORY_FREE_LIST + pageNo] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        alias i R3;
        i = PROCESS_TABLE + 20;
        while(i < PROCESS_TABLE+256) do
            if([i] == WAIT_MEM) then
                [i] = READY;
            endif;
            i = i + 16;
        endwhile;
    endif;
    // breakpoint;
    return;
endif;

if(functionNum == RELEASE_BLOCK) then

    alias blockno R2;

    //dec disk free list entry
    [DISK_FREE_LIST + blockno] = [DISK_FREE_LIST + blockno]-1;

    return;
endif;

if(functionNum == GET_CODE_PAGE) then
    alias blockno R2;

    alias i R3;
    i = 0;
    alias j R4;

    
    while(i < 16 ) do
        j=4;
        while( j < 8) do
            if( [ DISK_MAP_TABLE + i*10 + j] == blockno  && [PAGE_TABLE_BASE + i*20 + 2*j] != -1 ) then

                R0=[PAGE_TABLE_BASE + i*20 + 2*j];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;

            endif;
            j=j+1;
        endwhile;
        i=i+10;
    endwhile;

    // GET_FREE_PAGE
    multipush(R1,R2,R3,R4);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4);

    // DISK_LOAD
    multipush(R0,R1,R2,R3,R4);
    R1=2;
    R4=blockno;
    R2=[SYSTEM_STATUS_TABLE + 1];
    R3=R0;
    call DEVICE_MANAGER;
    multipop(R0,R1,R2,R3,R4);

    return;
endif;