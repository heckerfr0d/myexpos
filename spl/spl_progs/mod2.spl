// MEMORY_MANAGER
alias functionNum R1;

if (functionNum == GET_FREE_PAGE) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    alias process_table_entry R3;
    process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+5*CORE+1]*16;

    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [process_table_entry + 4] = WAIT_MEM;
        multipush(R0, R1, R3);
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;

        call SCHEDULER;

        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0, R1, R3);
    endwhile;


    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    if ([SYSTEM_STATUS_TABLE + 2] < [75*512]) then
        [75*512] = [SYSTEM_STATUS_TABLE + 2];
    endif;

    alias page R4;
    page = 76;
    while (page < 128) do
        if([MEMORY_FREE_LIST + page] == 0) then
            [MEMORY_FREE_LIST + page] = 1;
            R0 = page;
            return;
        endif;
        page = page + 1;
    endwhile;
    return;
endif;

if (functionNum == RELEASE_PAGE) then
    alias pageNo R2;
    [MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] - 1;
    if ([MEMORY_FREE_LIST + pageNo] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        alias i R3;
        i = PROCESS_TABLE + 20;
        while(i < PROCESS_TABLE+256) do
            if([i] == WAIT_MEM) then
                [i] = READY;
            endif;
            i = i + 16;
        endwhile;
    endif;
    return;
endif;

if (functionNum == GET_FREE_BLOCK) then
    alias block R2;
    block = DISK_FREE_AREA;
    while (block < DISK_SWAP_AREA) do
        if([DISK_FREE_LIST + block] == 0) then
            [DISK_FREE_LIST + block] = 1;
            R0 = block;
            return;
        endif;
        block = block + 1;
    endwhile;
    R0 = -1;
    return;
endif;

if(functionNum == RELEASE_BLOCK) then

    alias blockno R2;

    //dec disk free list entry
    [DISK_FREE_LIST + blockno] = [DISK_FREE_LIST + blockno] - 1;

    return;
endif;

if (functionNum == GET_CODE_PAGE) then
    // get code page
    alias blockNo R2;
    alias dmt R3;
    alias ptb R4;
    alias j R5;
    dmt = DISK_MAP_TABLE+4;
    ptb = PAGE_TABLE_BASE+8;
    while(dmt < DISK_MAP_TABLE+160) do
        j = 0;
        while(j < 4) do
            if([dmt+j]==blockNo && [ptb+2*j]!=-1) then
                R0 = [ptb+2*j];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;
            endif;
            j = j + 1;
        endwhile;
        dmt = dmt + 10;
        ptb = ptb + 20;
    endwhile;

    // get free page
    multipush(R1, R2, R3, R4, R5);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    // disk load
    multipush(R0, R1, R2, R3, R4, R5);
    R4 = blockNo;
    R3 = R0;
    R2 = [SYSTEM_STATUS_TABLE+5*CORE+1];
    R1 = 2;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5);

    return;
endif;

if (functionNum == GET_SWAP_BLOCK) then
    alias block R2;
    block = DISK_SWAP_AREA;
    while (block < DISK_SIZE) do
        if([DISK_FREE_LIST + block] == 0) then
            [DISK_FREE_LIST + block] = 1;
            R0 = block;
            return;
        endif;
        block = block + 1;
    endwhile;
    R0 = -1;
    breakpoint;
    return;
endif;