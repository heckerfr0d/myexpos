// load exception handler
loadi(2, 15);
loadi(3, 16);

// load timer int
loadi(4, 17);
loadi(5, 18);

// load int7
loadi(16, 29);
loadi(17, 30);

// load exit code
loadi(22, 35);
loadi(23, 36);

// load library
loadi(63, 13);
loadi(64, 14);

// load init
loadi(65, 7);
loadi(66, 8);

// load idle
loadi(69,11);
loadi(70,12);


PTLR = 10;

// IDLE
PTBR = PAGE_TABLE_BASE;
// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// INIT
PTBR = PAGE_TABLE_BASE + 20;
// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// PROCESS_TABLE
// IDLE
[PROCESS_TABLE+1] = 0;                  // PID
[PROCESS_TABLE+4] = CREATED;            // STATE
[PROCESS_TABLE+11] = 82;                // UAPage
[PROCESS_TABLE+12] = 0;                 // KPTR
[PROCESS_TABLE+13] = 8*512;             // UPTR
[PROCESS_TABLE+14] = PAGE_TABLE_BASE;   // PTBR
[PROCESS_TABLE+15] = 10;                // PTLR
// INIT
[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+20] = RUNNING;
[PROCESS_TABLE+27] = 80;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE+31] = 10;

// SYSTEM_STATUS_TABLE
[SYSTEM_STATUS_TABLE+1] = 1;

[81*512] = [69*512+1];
[76*512] = [65*512+1];

SP = 8*512;

ireturn;