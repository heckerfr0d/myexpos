alias process_table_entry R4;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

// store value of userSP in R0
alias userSP R0;
userSP = SP;

// count switch to kernel mode
[75*512 + 3] = [75*512 + 3] + 1;

// extract syscall number from user stack
alias sysno R1;
sysno = [[PTBR + 2*(userSP-5)/512]*512 + (userSP-5)%512];

// set MODE FLAG (in PROCESS TABLE) to syscall number
[process_table_entry + 9] = sysno;

// switch to kernel stack
[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

if (sysno == 1) then
    // create file
    alias fileName R2;
    fileName = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
    // return 0 if file exists
    alias i R3;
    alias inode R5;
    i = INODE_TABLE + 1;
    inode = -1;
    while (i < INODE_TABLE + 960) do
        if ([i]==fileName) then
            [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
            [process_table_entry + 9] = 0;
            SP = userSP;
            ireturn;
        endif;
        if ([i]==-1 && inode==-1) then
            inode = i-1;
        endif;
        i = i + 16;
    endwhile;

    if (inode==-1) then
        // inode full
        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
        [process_table_entry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    i = inode;

    // set inode entries
    alias perm R5;
    perm = [[PTBR + 2*(userSP-3)/512]*512 + (userSP-3)%512];
    [i] = DATA;
    [i+1] = fileName;
    [i+2] = 0;
    [i+3] = [process_table_entry + 3];
    [i+4] = perm;
    i = (i - INODE_TABLE)/16;

    // set root entries
    alias root R6;
    root = ROOT_FILE + i*8;
    [root] = fileName;
    [root+1] = 0;
    [root+2] = DATA;
    [root+3] = [USER_TABLE + [process_table_entry + 3]*2];
    [root+4] = perm;

    // return
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

if (sysno == 4) then
    // delete file
    alias fileName R2;
    fileName = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
    alias i R3;
    i = INODE_TABLE + 1;
    while (i < INODE_TABLE + 960) do
        if ([i]==fileName) then
            break;
        endif;
        i = i + 16;
    endwhile;
    if (i>=INODE_TABLE + 960) then
        // file not found
        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
        [process_table_entry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;
    if (([i-1]!=DATA) || ([i+3]==0 && [process_table_entry + 3]!=1 && [i+2]!=[process_table_entry + 3])) then
        // file is not a data file or not owned by current user
        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
        [process_table_entry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias idx R4;
    idx = (i - INODE_TABLE - 1)/16;

    multipush(R0, R1, R2, R3, R4);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = idx;
    call RESOURCE_MANAGER;
    multipop(R0, R1, R2, R3, R4);

    if ([FILE_STATUS_TABLE + idx*4 + 1] != -1) then
        // file is open
        multipush(R0, R1, R2, R3, R4);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = idx;
        call RESOURCE_MANAGER;
        multipop(R0, R1, R2, R3, R4);

        [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -2;
        [process_table_entry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias j R5;
    j = 7;
    while (j<11) do
        if ([i+j]!=-1) then
            // block is not empty
            alias bt R6;
            bt = BUFFER_TABLE + [i+j]%4;
            if ([bt]==[i+j]) then
                // block is in buffer
                [bt+1] = 0;
            endif;
            multipush(R0, R1, R2, R3, R4);
            R1 = 4;
            R2 = [i+j];
            call MEMORY_MANAGER;
            multipop(R0, R1, R2, R3, R4);
            [i+j] = -1;
        endif;
        j = j + 1;
    endwhile;

    [i-1] = -1;
    [i] = -1;
    [i+1] = 0;
    [i+2] = -1;
    [i+3] = -1;

    alias root R6;
    root = ROOT_FILE + idx*8;
    [root] = -1;
    [root+1] = 0;
    [root+2] = -1;
    [root+3] = -1;
    [root+4] = -1;

    multipush(R0, R4);
    R1 = 5;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = idx;
    call RESOURCE_MANAGER;
    multipop(R0, R4);

    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;
