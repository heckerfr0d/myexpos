// DEVICE_MANAGER
alias functionNum R1;
alias currentPID R2;

if (functionNum == DISK_STORE) then
    //acquire disk
    multipush(R1,R2,R3,R4);
    R1 = 3;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    //set dst
    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = R3;
    [DISK_STATUS_TABLE + 3] = R4;

    store(R3, R4);

    [PROCESS_TABLE + currentPID*16 +4] = WAIT_DISK;

    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);

    return;
endif;

if(functionNum == DISK_LOAD) then
    //acquire disk
    multipush(R1,R2,R3,R4);
    R1 = 3;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    //set dst

    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = R3;
    [DISK_STATUS_TABLE + 3] = R4;

    load(R3,R4);

    [PROCESS_TABLE + currentPID*16 +4] = WAIT_DISK;

    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);

    return;
endif;

if(functionNum == TERMINAL_WRITE) then
    multipush(R1,R2,R3);
    R1=8;
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3);

    print R3;

    multipush(R1,R2,R3);
    R1=9;
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3);
    return;
endif;

if(functionNum == TERMINAL_READ) then
    multipush(R1,R2,R3);
    R1=8;
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3);

    read;

    [PROCESS_TABLE + R2*16 + 4] = WAIT_TERMINAL;

    multipush(R1,R2,R3);
    call SCHEDULER;

    multipop(R1,R2,R3);

    [[PTBR + 2*R3/512]*512 + R3%512] = [PROCESS_TABLE + R2*16 + 8];

    return;
endif;
